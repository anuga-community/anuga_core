name: Conda setup

on: [pull_request, push]

jobs:
  test_conda:
    name: Example (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        #os: ["macos-latest"]
        python-version: ["3.9", "3.11", "3.13"]
        exclude:
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.11"
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          miniforge-version: latest

      - name: Install Our own environment
        shell: bash -el {0}
        run: |
          conda env create --name anuga_env --file environments/environment_${{matrix.python-version}}.yml

      - name: Install gcc compilers on Windows
        if: runner.os == 'Windows'
        shell: bash -el {0}
        run: |
           conda install -c conda-forge -n anuga_env libpython gcc_win-64 gxx_win-64

      - name: Install clang with openmp compiler on macOS
        if: runner.os == 'macOS'
        shell: bash -el {0}
        run: |
           conda install -c conda-forge -n anuga_env cxx-compiler llvm-openmp
           
      - name: Install anuga package
        shell: bash -el {0}
        run: |
          conda activate anuga_env
          pip install --no-build-isolation -v .

      - name: Test package
        shell: bash -el {0}
        run: |
          conda activate anuga_env
          cd ..
          export OMP_NUM_THREADS=1
          pytest -p no:faulthandler -q --pyargs anuga
